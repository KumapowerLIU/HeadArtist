name: "dreamfusion-sd=sdf"
tag: "${rmspace:${system.prompt_processor.prompt},_}"
exp_root_dir: "outputs"
seed: 0

data_type: "random-camera-datamodule"
data:
  batch_size: 1
  width: 64
  height: 64
  camera_distance_range: [2.0, 2.0]
  fovy_range: [50, 70]
#  azimuth_range : [-90 , 90]
  elevation_range: [20, 70]
  light_sample_strategy: "dreamfusion"
  eval_camera_distance: 2.0
  eval_elevation_deg : 0.
  eval_fovy_deg: 70.

system_type: "dreamfusion-system"
system:
  geometry_type: "implicit-sdf"
  geometry:
    radius: 1.0
#    normal_type: finite_difference
    shape_init: mesh:load/shapes/flame.obj
    shape_init_params: 0.9
    shape_init_mesh_up: +y
    shape_init_mesh_front: +z
    pos_encoding_config:
      otype: HashGrid
      n_levels: 16
      n_features_per_level: 2
      log2_hashmap_size: 19
      base_resolution: 16
      per_level_scale: 1.447269237440378 # max resolution 4096
    # coarse to fine hash grid encoding
    # to ensure smooth analytic normals

  material_type: "no-material"
  material:
    n_output_dims: 3
    color_activation: sigmoid

  background_type: "neural-environment-map-background"
  background:
    color_activation: sigmoid
    random_aug: true

  renderer_type: "neus-volume-renderer"
  renderer:
    radius: ${system.geometry.radius}
    num_samples_per_ray: 512
    cos_anneal_end_steps: ${trainer.max_steps}
    eval_chunk_size: 8192

  prompt_processor_type: "stable-diffusion-prompt-processor"
  prompt_processor:
    pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
    prompt: ???

  guidance_type: "stable-diffusion-guidance"
  guidance:
    pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
    guidance_scale: 100.
    weighting_strategy: sds
    min_step_percent: 0.02
    max_step_percent: 0.98

  loggers:
    wandb:
      enable: false
      project: "threestudio"
      name: None

  loss:
    lambda_sds: 0.001
    lambda_orient: 1.
    lambda_sparsity: 0.1
    lambda_opaque: 0.
    lambda_z_variance: 0.
    lambda_eikonal: 0.
  optimizer:
    name: Adam
    args:
      betas: [0.9, 0.99]
      eps: 1.e-15
      lr: 0.001
    params:
      geometry.encoding:
        lr: 0.01
      geometry.sdf_network:
        lr: 0.001
      geometry.feature_network:
        lr: 0.001
      background:
        lr: 0.001
      renderer:
        lr: 0.001
#  loss:
#    lambda_sds: 1.
#    lambda_orient: [0, 10., 1000., 5000]
#    lambda_sparsity: 1.
#    lambda_opaque: 0.
#  optimizer:
#    name: Adam
#    args:
#      lr: 0.01
#      betas: [0.9, 0.99]
#      eps: 1.e-15
#    params:
#      geometry:
#        lr: 0.01
#      background:
#        lr: 0.001

trainer:
  max_steps: 10000
  log_every_n_steps: 1
  num_sanity_val_steps: 0
  val_check_interval: 50
  enable_progress_bar: true
  precision: 16-mixed


checkpoint:
  save_last: true # save at each validation time
  save_top_k: -1
  every_n_train_steps: ${trainer.max_steps}
